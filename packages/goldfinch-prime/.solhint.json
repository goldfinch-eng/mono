{
  "extends": "solhint:recommended",
  "rules": {
    "compiler-version": ["error", ">=0.8.0"],
    "prettier/prettier": "error",
    "not-rely-on-time": "off",
    "reason-string": ["warn", {"maxLength": 120}],
    "max-line-length": ["error", 120],
    "gas-custom-errors": "off",
    "custom-errors": "off",
    "modifiers/ensure-modifiers": [
      "error",
      {
        "ignoreContractKind": ["interface", "library"],
        "ignoreVisibility": ["internal", "private"],
        "required": {
          "**/contracts/**": ["onlyAdmin"]
        },
        "override": {
          "**/PoolTokens.sol:PoolTokens": {
            "mint": ["onlyPool"],
            "redeem": ["onlyPool"],
            "withdrawPrincipal": ["onlyPool"],
            "onPoolCreated": ["onlyGoldfinchFactory"],
            "splitToken": [],
            "burn": [],
            "getTokenInfo": []
          },
          "*:*.initialize": ["initializer"],
          "*:*.__initialize__": ["initializer"],
          "*:*.null": [],
          "**/CreditDesk.sol:CreditDesk": {
            "createCreditLine": [],
            "createPool": [],
            "drawdown": [],
            "pay": [],
            "assessCreditLine": [],
            "applyPayment": [],
            "migrateCreditLine": [],
            "migrateV1CreditLine": []
          },
          "**/GoldfinchConfig.sol:GoldfinchConfig": {
            "addToGoList": ["onlyGoListerRole"],
            "bulkAddToGoList": ["onlyGoListerRole"],
            "removeFromGoList": ["onlyGoListerRole"],
            "bulkRemoveFromGoList": ["onlyGoListerRole"]
          },
          "**/MonthlyScheduleRepo.sol:MonthlyScheduleRepo": {
            "createSchedule": []
          },
          "**/GoldfinchFactory.sol:GoldfinchFactory": {
            "createCreditLine": [],
            "createPool": ["onlyAdminOrBorrower"],
            "createCallableLoan": ["onlyAdminOrBorrower"],
            "createCallableLoanWithProxyOwner": ["onlyAdminOrBorrower"],
            "validPool": [],
            "createMigratedPool": []
          },
          "**/CreditLine.sol:CreditLine": {
            "setLimit": []
          },
          "**/VersionedImplementationRepository.sol:VersionedImplementationRepository": {
            "getByVersion": [],
            "hasVersion": []
          },
          "**/ImplementationRepository.sol:ImplementationRepository": {
            "initialize": ["initialize"],
            "createSet": ["onlyAdmin", "whenNotPaused"],
            "append": ["onlyAdmin", "whenNotPaused"],
            "remove": ["onlyAdmin", "whenNotPaused"],
            "setUpgradeData": ["onlyAdmin", "whenNotPaused"],
            "has": [],
            "setExists": [],
            "currentImplementation": ["whenNotPaused"],
            "nextImplementationOf": ["whenNotPaused"]
          },
          "**/V2Migrator.sol:V2Migrator": {
            "upgradeImplementations": []
          },
          "**/MigratedTranchedPool.sol:MigratedTranchedPool": {
            "migrateCreditLineToV2": []
          },
          "**/BaseUpgradeablePausable.sol:BaseUpgradeablePausable": {
            "__BaseUpgradeablePausable__init": []
          },
          "**/Fidu.sol:Fidu": {
            "__initialize__": [],
            "mintTo": [],
            "burnFrom": [],
            "updateGoldfinchConfig": []
          },
          "**/Pool.sol:Pool": {
            "deposit": [],
            "withdraw": [],
            "withdrawInFidu": [],
            "collectInterestAndPrincipal": [],
            "distributeLosses": [],
            "transferFrom": [],
            "drawdown": []
          },
          "**/UcuProxy.sol:UcuProxy": {
            "upgradeImplementation": ["onlyOwner"],
            "upgradeToCurrentImplementation": ["onlyOwner"],
            "transferOwnership": ["onlyOwner"]
          },
          "**/CallableLoan.sol:CallableLoan": {
            "submitCall": ["whenNotPaused", "nonReentrant"],
            "deposit": ["whenNotPaused", "nonReentrant"],
            "depositWithPermit": ["whenNotPaused", "nonReentrant"],
            "withdraw": ["whenNotPaused", "nonReentrant"],
            "withdrawMax": ["whenNotPaused", "nonReentrant"],
            "withdrawMultiple": ["whenNotPaused", "nonReentrant"],
            "pay": ["whenNotPaused", "nonReentrant"],
            "drawdown": ["onlyLocker", "whenNotPaused", "nonReentrant"],
            "setAllowedUIDTypes": ["onlyLocker"],
            "setFundableAt": ["onlyLocker"],
            "setMaxLimit": [],
            "setLimit": []
          },
          "**/TranchedPool.sol:TranchedPool": {
            "setAllowedUIDTypes": ["onlyLocker"],
            "deposit": ["whenNotPaused"],
            "depositWithPermit": [],
            "lockJuniorCapital": ["whenNotPaused", "onlyLocker"],
            "lockPool": ["whenNotPaused", "onlyLocker"],
            "setFundableAt": ["onlyLocker"],
            "initializeNextSlice": ["whenNotPaused", "onlyLocker"],
            "withdraw": ["whenNotPaused"],
            "withdrawMax": ["whenNotPaused"],
            "withdrawMultiple": [],
            "drawdown": ["whenNotPaused"],
            "assess": ["whenNotPaused"],
            "pay": ["whenNotPaused"]
          },
          "**/PauserPausable.sol:PauserPausable": {
            "__PauserPausable__init": [],
            "pause": ["onlyPauserRole"],
            "unpause": ["onlyPauserRole"]
          },
          "**/SeniorPool.sol:SeniorPool": {
            "deposit": [],
            "depositWithPermit": [],
            "invest": [],
            "withdraw": [],
            "withdrawInFidu": [],
            "redeem": [],
            "writedown": [],
            "claimWithdrawalRequest": [],
            "initializeEpochs": [],
            "cancelWithdrawalRequest": [],
            "requestWithdrawal": [],
            "addToWithdrawalRequest": []
          },
          "**/SeniorPoolFidu.sol:SeniorPoolFidu": {
            "__initialize__": [],
            "mintTo": [],
            "burnFrom": [],
            "updateGoldfinchConfig": []
          },
          "**/WithdrawalRequestToken.sol:WithdrawalRequestToken": {
            "approve": [],
            "setApprovalForAll": [],
            "transferFrom": [],
            "safeTransferFrom": [],
            "mint": ["onlySeniorPool"],
            "burn": ["onlySeniorPool"]
          },
          "**/TransferRestrictedVault.sol:TransferRestrictedVault": {
            "depositJunior": [],
            "depositJuniorWithPermit": [],
            "depositSenior": [],
            "depositSeniorWithPermit": [],
            "withdrawJunior": [],
            "withdrawSenior": [],
            "withdrawSeniorInFidu": [],
            "transferPosition": []
          },
          "**/DynamicLeverageRatioStrategy.sol:DynamicLeverageRatioStrategy": {
            "setLeverageRatio": ["onlySetterRole"]
          },
          "**/GFI.sol:GFI": {
            "mint": ["onlyMinter"],
            "setCap": ["onlyOwner"],
            "pause": ["onlyPauser"],
            "unpause": ["onlyPauser"]
          },
          "**/StakingRewards.sol:StakingRewards": {
            "stake": [],
            "stakeWithLockup": [],
            "depositAndStake": [],
            "depositWithPermitAndStake": [],
            "depositAndStakeWithLockup": [],
            "depositWithPermitAndStakeWithLockup": [],
            "depositToCurve": [],
            "depositToCurveAndStake": [],
            "depositToCurveAndStakeFrom": [],
            "unstake": [],
            "unstakeMultiple": [],
            "unstakeAndWithdraw": [],
            "unstakeAndWithdrawMultiple": [],
            "unstakeAndWithdrawInFidu": [],
            "unstakeAndWithdrawMultipleInFidu": [],
            "updatePositionEffectiveMultiplier": [],
            "getReward": [],
            "kick": [],
            "exit": [],
            "exitAndWithdraw": [],
            "addToStake": []
          },
          "**/CommunityRewards.sol:CommunityRewards": {
            "grant": ["nonReentrant", "whenNotPaused", "onlyDistributor"],
            "getReward": []
          },
          "**/Go.sol:Go": {
            "go": [],
            "goOnlyIdTypes": [],
            "goSeniorPool": []
          },
          "**/BackerRewards.sol:BackerRewards": {
            "allocateRewards": ["onlyPool"],
            "setPoolTokenAccRewardsPerPrincipalDollarAtMint": [],
            "onTranchedPoolDrawdown": ["onlyPool", "nonReentrant"],
            "onCallableLoanDrawdown": ["onlyPool", "nonReentrant"],
            "forceIntializeStakingRewardsPoolInfo": ["onlyAdmin"],
            "setBackerAndStakingRewardsTokenInfoOnSplit": ["onlyPoolTokens"],
            "clearTokenInfo": ["onlyPoolTokens"],
            "withdraw": ["nonReentrant"],
            "withdrawMultiple": []
          },
          "**/MembershipOrchestrator.sol:MembershipOrchestrator": {
            "harvest": ["whenNotPaused", "nonReentrant"],
            "collectRewards": ["whenNotPaused", "nonReentrant"],
            "deposit": ["whenNotPaused", "nonReentrant"],
            "withdraw": ["whenNotPaused", "nonReentrant"],
            "finalizeEpochs": ["whenNotPaused", "nonReentrant"]
          },
          "**/MerkleDirectDistributor.sol:MerkleDirectDistributor": {
            "_setGrantAccepted": [],
            "acceptGrant": []
          },
          "**/MerkleDistributor.sol:MerkleDistributor": {
            "_setGrantAccepted": [],
            "acceptGrant": []
          },
          "**/ERC1155PresetPauserUpgradeable.sol:ERC1155PresetPauserUpgradeable": {
            "pause": [],
            "unpause": []
          },
          "**/UniqueIdentity.sol:UniqueIdentity": {
            "mint": ["onlySigner", "incrementNonce"],
            "signerMintTo": ["onlySignerCanCall"],
            "pause": ["onlyRole"],
            "unpause": ["onlyRole"],
            "mintTo": ["onlySignerMintTo", "incrementNonce"],
            "_mintTo": [],
            "safeTransferFrom": [],
            "safeBatchTransferFrom": [],
            "burn": ["onlySigner", "incrementNonce"]
          },
          "**/TranchingLogic.sol:*": {
            "lockTranche": [],
            "initializeNextSlice": [],
            "applyToAllSlices": [],
            "applyToAllSeniorTranches": [],
            "applyToAllJuniorTranches": [],
            "applyToSeniorTranche": [],
            "applyToJuniorTranche": [],
            "applyBySharePrice": [],
            "applyByAmount": [],
            "migrateAccountingVariables": [],
            "closeCreditLine": []
          },
          "**/Zapper.sol:*": {
            "zapStakeToTranchedPool": ["whenNotPaused", "nonReentrant"],
            "zapFiduStakeToTranchedPool": ["whenNotPaused", "nonReentrant"],
            "zapMultipleToTranchedPool": ["whenNotPaused", "nonReentrant"],
            "unzapMultipleFromTranchedPools": ["whenNotPaused", "nonReentrant"],
            "claimMultipleTranchedPoolZaps": ["whenNotPaused", "nonReentrant"],
            "claimTranchedPoolZap": ["whenNotPaused", "nonReentrant"],
            "unzapToStakingRewards": ["whenNotPaused", "nonReentrant"],
            "zapStakeToCurve": ["whenNotPaused", "nonReentrant"]
          },
          "**/contracts/cake/Context.sol:*": {
            "setUp": [],
            "tearDown": [],
            "tx": []
          },
          "**/contracts/cake/AccessControl.sol:*": {
            "addOperator": [],
            "removeOperator": [],
            "setAdmin": []
          },
          "**/contracts/cake/Router.sol:*": {
            "setContract": []
          },
          "**/MembershipVault.sol:*": {
            "checkpoint": ["onlyOperator"],
            "adjustHoldings": ["onlyOperator"],
            "_checkpoint": [],
            "_fetchOrCreatePosition": []
          },
          "**/CapitalLedger.sol:*": {
            "depositERC20": ["onlyOperator"],
            "depositERC721": ["onlyOperator"],
            "withdraw": ["onlyOperator"],
            "withdrawERC20": ["onlyOperator"],
            "harvest": ["onlyOperator"]
          },
          "**/GFILedger.sol:*": {
            "deposit": ["onlyOperator"],
            "withdraw": ["onlyOperator"],
            "_mintPosition": [],
            "_withdraw": []
          },
          "**/contracts/protocol/core/membership/ERC20Splitter.sol:*": {
            "distribute": []
          },
          "**/MembershipDirector.sol:*": {
            "consumeHoldingsAdjustment": ["onlyOperator"],
            "collectRewards": ["onlyOperator"],
            "finalizeEpochs": ["onlyOperator"]
          },
          "**/MembershipCollector.sol:*": {
            "onReceive": [],
            "distributeFiduTo": ["onlyOperator"],
            "finalizeEpochs": ["onlyOperator"]
          },
          "**/MembershipLedger.sol:*": {
            "resetRewards": ["onlyOperator"],
            "allocateRewardsTo": ["onlyOperator"]
          },
          "**/contracts/test/**": {
            "*.*": []
          },
          "**/GPrime.sol:GoldfinchPrime": {
            "deposit": [],
            "depositWithPermit": [],
            "requestRedemption": [],
            "cancelRedemption": [],
            "fulfillRedemption": [],
            "withdraw": [],
            "updateSharePrice": [],
            "drawdown": [],
            "pause": [],
            "unpause": [],
            "mint": []
          }
        }
      }
    ]
  },
  "plugins": ["prettier", "modifiers"]
}
